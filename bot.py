import sys

from telebot.types import InlineKeyboardMarkup

import bot
from objects.telegram_bot import *
from methods.users import *
from methods.projects import *
from config import BOT_TOKEN
import requests

WELCOME_TEXT = """üëã –ü—Ä–∏–≤–µ—Ç!

üó≥ –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª–∏—Ç –í–∞–º –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ –ø—Ä–æ–µ–∫—Ç—ã –Ω–∞ 1561 StartUpFest, –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–≤ –≤ –Ω–∏—Ö –Ω–∞—à—É –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –≤–∞–ª—é—Ç—É. –í –∫–æ–Ω—Ü–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å.

üí™ –ï—Å–ª–∏ –í—ã –∞–≤—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞ - –ø–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–≤–æ–µ–π –∏–¥–µ–µ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å –∑—Ä–∏—Ç–µ–ª–µ–π, —á—Ç–æ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω—É–∂–Ω–æ –∏–º–µ–Ω–Ω–æ –≤ –≤–∞—à –ø—Ä–æ–µ–∫—Ç!

ü¶∏ –ï—Å–ª–∏ –í—ã —ç–∫—Å–ø–µ—Ä—Ç –∏–ª–∏ –≥–æ—Å—Ç—å - –ø–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã –∏ —Å–¥–µ–ª–∞—Ç—å —Ä–∞–∑—É–º–Ω—ã–π –≤—ã–±–æ—Ä - –∫–∞–∫–æ–π –ø—Ä–æ–µ–∫—Ç –í—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å? –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –∏–¥–µ–∏, –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∏–ª–æ—Ç–Ω–æ–π —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏.

üç∞ –ö—Å—Ç–∞—Ç–∏, –≥–æ—Å—Ç–∏, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏–≤—à–∏–µ –ø—Ä–æ–µ–∫—Ç—ã –≤ –∫–æ–Ω—Ü–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Ç–æ–∂–µ —Å–º–æ–≥—É—Ç –ø–æ–±–æ—Ä–æ—Ç—å—Å—è –∑–∞ –ø—Ä–∏–∑—ã –≤ –ø—Ä–æ–µ–∫—Ç–Ω–æ–º –∫–≤–∏–∑–µ!

P.S. –£—á—Ç–∏—Ç–µ, —á—Ç–æ –í–∞—à–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –ø–æ—Ä–æ–≤–Ω—É –¥–µ–ª—è—Ç—Å—è –º–µ–∂–¥—É –≤—Å–µ–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –∫–æ–º–∞–Ω–¥—ã.
"""

NEW_INVESTMENT_TEXT = f"‚ûï –ù–æ–≤–∞—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è"
CHANGE_INVESTMENT_TEXT = f"‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"
CANCEL_INVESTMENT_TEXT = '–Ø –ø–µ—Ä–µ–¥—É–º–∞–ª!'

INPROGRESS_INVESTMENTS = {}


@bot.message_handler(commands=['start', 'help'])
@find_user
def send_welcome(message, user):
    bot.send_message(message.from_user.id, ".")
    bot.send_message(message.from_user.id, WELCOME_TEXT)
    if not user:
        bot.send_message(message.from_user.id,
                         "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é. –ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤–∞—à–µ–≥–æ QR –∫–æ–¥–∞ —Å–æ —Å—Ç–æ–π–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
    else:
        send_investment_menu(message, user)


def send_investment_menu(message, user):
    keyboard = types.ReplyKeyboardMarkup()

    button = types.KeyboardButton(text=NEW_INVESTMENT_TEXT)
    keyboard.add(button)

    user_investments = user.investments()
    current_investments = ""
    if user_investments:
        button = types.KeyboardButton(text=CHANGE_INVESTMENT_TEXT)
        keyboard.add(button)

        for investment in user_investments:
            current_investments += f"\nüëç {investment['title']}: üí∏ {investment['amount']}"

    text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0}! –í –∫–æ–≥–æ –∏–Ω–≤–µ—Å—Ç–∏—Ä—É–µ–º?".format(user.name)

    text += f'\n\n üí∞ –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {user.balance("PC")} PC.'

    if current_investments:
        text += '\n\n üöÄ –¢–µ–∫—É—â–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: \n' + current_investments

    bot.send_message(message.from_user.id, text,
                     reply_markup=keyboard)


@bot.message_handler(content_types=['text'])
@requires_user
def process_message(message, user):
    if message.text.strip() == NEW_INVESTMENT_TEXT:
        keyboard = types.ReplyKeyboardMarkup()

        for name in map(lambda p: p.name, get_all_projects()):
            keyboard.add(types.KeyboardButton(text=name))

        keyboard.add(types.KeyboardButton(text='–Ø –ø–µ—Ä–µ–¥—É–º–∞–ª!'))

        message = bot.send_message(message.from_user.id, '–í –∫–∞–∫–æ–π –ø—Ä–æ–µ–∫—Ç –í—ã —Ö–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å?',
                                   reply_markup=keyboard)

        bot.register_next_step_handler(message, choose_project)

    elif message.text == CHANGE_INVESTMENT_TEXT:
        keyboard = types.ReplyKeyboardMarkup()

        for name in map(lambda i: i['title'], user.investments()):
            keyboard.add(types.KeyboardButton(text=name))

        keyboard.add(types.KeyboardButton(text='–Ø –ø–µ—Ä–µ–¥—É–º–∞–ª!'))

        message = bot.send_message(message.from_user.id, '–†–∞–∑–º–µ—Ä –∫–∞–∫–æ–π –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?',
                                   reply_markup=keyboard)

        bot.register_next_step_handler(message, choose_project)
    else:
        bot.send_message(message.from_user.id, "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ /start.",
                         reply_markup=types.ReplyKeyboardRemove())


@requires_user
def choose_project(message, user):
    project_name = message.text
    if message.text == CANCEL_INVESTMENT_TEXT:
        send_investment_menu(message, user)
        return

    try:
        project = find_project_by_name(project_name)

        if user in project.users:
            bot.send_message(message.from_user.id, "–ù–µ–ª—å–∑—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Å–≤–æ–π –ø—Ä–æ–µ–∫—Ç.")
            send_investment_menu(message, user)
            return

        INPROGRESS_INVESTMENTS[user.id] = project.id

        message = bot.send_message(message.from_user.id, f"–°–∫–æ–ª—å–∫–æ —Ö–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å? –í–≤–µ–¥–∏—Ç–µ 0 –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
                                   reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, choose_amount)

    except:
        bot.send_message(message.from_user.id, "–¢–∞–∫–æ–π –ø—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        send_investment_menu(message, user)


@requires_user
def choose_amount(message, user):
    try:
        if int(message.text) <= 0:
            raise InvalidData

        project = find_project_by_id(INPROGRESS_INVESTMENTS[user.id])
        had_investmenents = has_investmensts_from(project, user)
        make_investment(project, user, int(message.text))

        if not had_investmenents:
            message = bot.send_message(message.from_user.id,
                                       f"–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –ø–æ—á–µ–º—É –í—ã —Ä–µ—à–∏–ª–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç? –ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ, –º—ã –ø–µ—Ä–µ–¥–∞–¥–∏–º –í–∞—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∞–≤—Ç–æ—Ä–∞–º.")
            bot.register_next_step_handler(message, choose_comment)
        else:
            bot.send_message(message.from_user.id, "–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
            send_investment_menu(message, user)
    except Exception as e:
        exc_type, exc_obj, exc_tb = sys.exc_info()
        fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
        print(exc_type, fname, exc_tb.tb_lineno)
        print(e)
        bot.send_message(message.from_user.id, "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏—é.")
        send_investment_menu(message, user)


@requires_user
def choose_comment(message, user):
    if not message.text or len(message.text) < 10:
        message = bot.send_message(message.from_user.id,
                                   f"–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π...")
        bot.register_next_step_handler(message, choose_comment)
        return
    try:
        project = find_project_by_id(INPROGRESS_INVESTMENTS[user.id])
        add_comment(project, user, message.text)

        bot.send_message(message.from_user.id, "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∞ —É–ø–µ—à–Ω–æ!")
        send_investment_menu(message, user)

        del INPROGRESS_INVESTMENTS[user.id]
    except:
        bot.send_message(message.from_user.id, "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏—é.")
        send_investment_menu(message, user)


@bot.message_handler(content_types=['photo'])
@find_user
def task_handler(message, user):
    if user:
        bot.send_message(message.from_user.id, "–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")
    else:
        file_id = message.photo[-1].file_id
        path = bot.get_file(file_id)
        real_path = 'https://api.telegram.org/file/bot{0}/'.format(BOT_TOKEN) + path.file_path
        url = 'http://api.qrserver.com/v1/read-qr-code/'

        print(real_path)

        res = requests.post(url, {'fileurl': real_path})
        try:
            registration_code = res.json()[0]['symbol'][0]['data'].strip()
            print(registration_code)
            user = find_user_by_registration_code(registration_code)
            activate_user(user, message.from_user.id)
            bot.send_message(message.from_user.id,
                             "–£—Å–ø–µ—à–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è!")
            send_investment_menu(message, user)
        except Exception as e:
            print(e)
            bot.send_message(message.from_user.id,
                             "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å –¥—Ä—É–≥—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.")


if __name__ == '__main__':
    bot.polling(none_stop=True)
